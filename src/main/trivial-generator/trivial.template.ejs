<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <%- include(trivialCssPath) %>
    <title>Anime Trivial</title>
</head>

<body class="bg-sky-800 overflow-y-hidden">
    <!--Overlay Effect-->
    <div class="fixed hidden inset-0 z-10 bg-gray-600 bg-opacity-50 h-full w-full" id="modal-overlay">

        <!-- Modal Content -->
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="font-mono mt-3">
                <h3 class="text-lg text-center leading-6 font-medium text-gray-900">Informaci√≥n extra:</h3>
                <div class="mt-2 px-7 py-3">
                    <ul>
                        <li><span class="font-bold">Anime: </span><span id="modal-anime"></span></li>
                        <li><span class="font-bold">Tipo: </span><span id="modal-oped"></span></li>
                        <li><span class="font-bold">Banda: </span><span id="modal-band"></span></li>
                        <li><span class="font-bold">Canci√≥n: </span><span id="modal-song"></span></li>
                    </ul>
                </div>
                <div class="items-center px-4 py-3">
                    <button id="ok-btn"
                        class="px-4 py-2 bg-green-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-300">
                        OK
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Content -->
    <h1 class="text-white font-bold text-2xl ml-5 mt-5">Anime Trivial</h1>
    <div class="flex justify-around w-full py-0 px-5 mt-5 gap-5 overflow-y-scroll">
        <div id="leftPanel" class="w-[250px] px-0 mr-1 flex-shrink-0 sticky top-0">
            <div id="div-controls" class="border rounded border-black w-full px-2 mb-6 h-32 bg-sky-300">
                <div id="time" class="pt-1 text-lg font-bold">
                    <span id="current-time" class="ml-1">-:-</span> <span id="total-duration"
                        class="mr-1 float-right">-:-</span>
                </div>
                <div id="progressBar" class="w-full h-3 bg-white mt-[1px] rounded">
                    <div id="progressBarCurrent" class="w-0 h-full bg-red-600 rounded"></div>
                </div>
                <div id="div-buttons" class="flex mt-2 justify-evenly">
                    <button id="btn-play" onclick="togglePause();">‚ñ∂</button>
                    <button id="btn-stop" onclick="stop();">‚èπ</button>
                    <button id="btn-reveal" onclick="reveal();">üîé</button>
                    <button id="btn-info" onclick="infoModal();">‚ÑπÔ∏è</button>
                </div>
                <input id="volume-range" class="w-full mt-3" type="range" min="0" max="100" step="1"
                    oninput="setVolume(this.value)" />

                <div id="player" class="w-0 h-0"></div>
                <audio id="audio" controls class="hidden">
                    <source id="audio-source">
                </audio>
            </div>

            <div id="div-scoreboard" class="w-full">
                <button
                    class="w-28 p-1 flex mx-auto border border-black shadow-sm text-sm font-medium rounded-md text-white bg-teal-500 hover:bg-teal-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    onclick="addPlayer()">
                    <span class="w-full text-center">Add player</span>
                </button>

                <div id="players" class="w-full mt-2">

                </div>
            </div>
        </div>
        <div id="mainPanel" class="w-[88%] px-4 mb-3 h-[80vh]">
            <div id="song-panel-div" class="flex justify-start w-full flex-wrap gap-5">
                <% 
                const DIFFICULTY_COLORS = {
                    easy: "border-green-900",
                    normal: "border-sky-900",
                    hard: "border-red-900"
                };
                    songs.forEach((song, index) => { %>
                        <div id="<%= song.id %>" data-difficulty="<%= song.difficulty %>" name="song-panel"
                    class="border-4 <%= DIFFICULTY_COLORS[song.difficulty] %> xl:basis-56 lg:basis-52 bg-no-repeat bg-center bg-cover relative basis-60 flex-shrink-0 h-[10rem] pl-1
                        <%= song.isError ? " bg-black" : "" %>" onclick="toggleAudio(this.id);">
                            <span class="font-bold"><%= index + 1 %></span>
                            <span id="anime-<%=song.id%>" class="hidden font-mono absolute bottom-0 left-0 px-1 w-full bg-black text-white">
                                <%= song.anime %>
                            </span>
                        </div>
                <% }) %>
            </div>
        </div>
    </div>


    <script>
        let currentID = "";
        let currentCR = null;
        let player;
        let interval;

        const audio = document.getElementById("audio");
        const audioSource = document.getElementById("audio-source");

        const btnPlay = document.getElementById("btn-play");

        const songs = <%- JSON.stringify(songs) %>;

        const animeInfo = <%- JSON.stringify(animeInfo) %>;

        // ************
        //     MODAL
        // ************
        const modal = document.getElementById("modal-overlay");
        const btnInfo = document.getElementById("btn-info");
        const btnModal = document.getElementById("ok-btn");

        const modalAnime = document.getElementById("modal-anime");
        const modalOped = document.getElementById("modal-oped");
        const modalBand = document.getElementById("modal-band");
        const modalSong = document.getElementById("modal-song");

        btnModal.onclick = () => (modal.style.display = "none");

        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        };

        function infoModal() {
            if (currentID == "") return;
            modal.style.display = "block";

            const song = animeInfo[currentID];

            modalAnime.innerHTML = song.anime;
            modalOped.innerHTML = song.oped + " " + song.opedNumber;
            modalBand.innerHTML = song.band;
            modalSong.innerHTML = song.name;
        }

        function getPlayerNumber(element) {
            return element.id.split("-").at(-1);
        }

        function addPlayer() {
            const playersDiv = document.getElementById("players");

            const players = document.getElementsByName("player");
            let newPlayerNumber = 0;
            if (players.length > 0) {
                newPlayerNumber =
                    parseInt(Array.from(players).at(-1).id.split("-").at(-1)) + 1;
            }

            const newPlayer = `<div id="player-${newPlayerNumber}" name="player" class="flex justify-start border gap-0 border-black rounded w-full bg-sky-300 p-2">
                        <div class="w-9/12" id="div-name-${newPlayerNumber}">
                        <input id="name-${newPlayerNumber}" type="text" placeholder="New player" class="px-1 bg-transparent w-full" onkeydown="enterName(event);">
                        </div>
                        <div>
                        <button onclick="confirmPlayer(this);" id="confirm-player-${newPlayerNumber}">‚úÖ</button>
                        <button onclick="deletePlayer(this);" id="delete-player-${newPlayerNumber}">‚ùå</button>
                        </div>
                        <div id="score-player-${newPlayerNumber}" class="flex justify-end gap-0 w-24 box-border" style="display:none">
                        <button id="score-minus-${newPlayerNumber}" class="bg-red-600 w-5 h-6 rounded-tl rounded-bl" onclick="editScore(this, 'remove');"> - </button>
                        <span id="score-number-${newPlayerNumber}" class="text-center w-8 h-6 border border-black"> 0 </span>
                        <button id="score-plus-${newPlayerNumber}" class="bg-green-600 w-5 h-6 rounded-tr rounded-br" onclick="editScore(this, 'add');"> + </button>
                        </div>
                    </div>`;
            playersDiv.insertAdjacentHTML("beforeend", newPlayer);

            return document.getElementById(`player-${newPlayerNumber}`);
        }

        function enterName(event) {
            if (event.keyCode == 13) {
                const playerNumber = getPlayerNumber(event.target);
                const confirmButton = document.getElementById(
                    `confirm-player-${playerNumber}`
                );
                confirmPlayer(confirmButton);

                if (event.ctrlKey) {
                    const newPlayer = addPlayer();
                    const newPlayerNumber = getPlayerNumber(newPlayer);
                    const newPlayerName = document.getElementById(`name-${newPlayerNumber}`);
                    newPlayerName.focus();
                }
            }
        }

        function confirmPlayer(button) {
            const playerNumber = getPlayerNumber(button);
            const playerName = document.getElementById(`name-${playerNumber}`);

            if (playerName.value.trim() == "") return;
            playerName.disabled = true;

            document.getElementById(`div-name-${playerNumber}`).style.width =
                "fit-content";

            button.remove();
            document.getElementById(`delete-player-${playerNumber}`).remove();

            const scoreDiv = document.getElementById(`score-player-${playerNumber}`);
            scoreDiv.style.display = "flex";
        }

        function deletePlayer(button) {
            const playerNumber = getPlayerNumber(button);
            const player = document.getElementById(`player-${playerNumber}`);
            player.remove();
        }

        function editScore(button, mode) {
            const playerNumber = getPlayerNumber(button);
            const scoreNumber = document.getElementById(`score-number-${playerNumber}`);

            const score = parseInt(scoreNumber.innerHTML);
            const newScore = mode == "add" ? score + 1 : score - 1;

            scoreNumber.innerHTML = newScore;
        }

        function toggleAudio(songID) {
            if (songID == currentID) {
                return togglePause();
            }
            if (currentID != "") removeFocus(document.getElementById(currentID));

            const songPanel = document.getElementById(songID);

            currentID = songID;
            currentCR = !animeInfo[songID].isEmbeddable;

            setFocus(songPanel);
            if (!currentCR) {
                player.loadVideoById(songID);
                player.playVideo();
            } else {
                const audio = document.getElementById("audio");
                const audioSource = document.getElementById("audio-source");
                audioSource.src = "./offline/" + songID + ".mp3";
                audio.load();
                audio.addEventListener("loadedmetadata", () => audio.play());
            }
        }

        // 2. This code loads the IFrame Player API code asynchronously.
        function setupYT() {
            var tag = document.createElement("script");

            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName("script")[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        }

        function onYouTubeIframeAPIReady() {
            player = new YT.Player("player", {
                videoId: "",
                playerVars: {
                    playsinline: 1,
                },
                events: {
                    onStateChange: onPlayerStateChange,
                },
            });
        }

        function getDuration() {
            if (currentCR) return audio.duration;
            else return player.getDuration();
        }

        function getTime() {
            if (currentCR) return audio.currentTime;
            else return player.getCurrentTime();
        }

        function onPlay(event) {
            const songDuration = getDuration();

            interval = setInterval(() => {
                const time = getTime();
                const playerTimeDifference = (time / songDuration) * 100;
                progress(playerTimeDifference);
                const timeCurrent =
                    Math.floor(time / 60) + ":" + ("0" + Math.floor(time % 60)).slice(-2);
                document.getElementById("current-time").innerHTML = timeCurrent;
            }, 600);
            const timeTotal =
                Math.floor(songDuration / 60) +
                ":" +
                ("0" + Math.floor(songDuration % 60)).slice(-2);
            document.getElementById("total-duration").innerHTML = timeTotal;

            btnPlay.textContent = "‚è∏";
        }

        function stop() {
            if (currentCR) {
                audio.pause();
                audio.currentTime = 0;
            } else player.stopVideo();

            if (interval) {
                clearInterval(interval);
                interval = null;
            }

            progress(0);
            document.getElementById("current-time").innerHTML = "0:00";
            btnPlay.textContent = "‚ñ∂";
        }

        function onPause() {
            btnPlay.textContent = "‚ñ∂";

            if (interval) {
                clearInterval(interval);
                interval = null;
            }
        }

        function onPlayerStateChange(event) {
            switch (event.data) {
                case YT.PlayerState.ENDED:
                    stop();
                    break;
                case YT.PlayerState.PLAYING:
                    onPlay(event);
                    break;
                case YT.PlayerState.PAUSED:
                    onPause();
                    break;
                default:
                    break;
            }
        }

        function progress(percent) {
            const progressBar = document.getElementById("progressBar");
            const progressBarWidth = Math.floor(
                (percent * progressBar.offsetWidth) / 100
            );
            document.getElementById("progressBarCurrent").style.width =
                progressBarWidth + "px";
        }

        function togglePause() {
            if (currentID == "") return;

            if (currentCR) {
                if (audio.paused) audio.play();
                else audio.pause();
                return;
            }

            if (player.getPlayerState() == YT.PlayerState.PLAYING) {
                player.pauseVideo();
            } else {
                player.playVideo();
            }
        }

        const difficultyClasses = {
            easy: "border-green-900",
            normal: "border-sky-900",
            hard: "border-red-900",
        };

        function setFocus(div) {
            div.classList.remove("border-4");
            div.classList.add("border-8");

            const difficulty = div.dataset.difficulty;
            const borderClass = difficultyClasses[difficulty];

            div.classList.remove(borderClass);
            div.classList.add("border-red-600");
        }

        function removeFocus(div) {
            div.classList.remove("border-8");
            div.classList.add("border-4");

            const difficulty = div.dataset.difficulty;
            const borderClass = difficultyClasses[difficulty];

            div.classList.remove("border-red-600");
            div.classList.add(borderClass);

            stop();
            currentID = "";
            currentCR = null;
        }

        function reveal() {
            if (currentID == "") return;

            var div = document.getElementById(currentID);
            var answer = document.getElementById(`anime-${currentID}`);

            answer.classList.remove("hidden");

            div.style.backgroundImage =
                "url('http://img.youtube.com/vi/" + currentID + "/0.jpg')";
            removeFocus(div);
        }

        function setVolume(percent) {
            player.setVolume(percent);
            audio.volume = percent / 100;
        }

        setupYT();
        audio.addEventListener("play", onPlay);
        audio.addEventListener("pause", onPause);
    </script>
</body>

</html>